# MongoDB for Users
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-users
  namespace: hotel-booking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-users
  template:
    metadata:
      labels:
        app: mongo-users
    spec:
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: hotel-booking-secrets
              key: MONGODB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hotel-booking-secrets
              key: MONGODB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: users
        volumeMounts:
        - name: mongo-users-storage
          mountPath: /data/db
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongo-users-storage
        persistentVolumeClaim:
          claimName: mongo-users-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-users
  namespace: hotel-booking
spec:
  selector:
    app: mongo-users
  ports:
  - protocol : TCP
    port: 27017
    targetPort: 27017

---
# MongoDB for Hotels
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-hotels
  namespace: hotel-booking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-hotels
  template:
    metadata:
      labels:
        app: mongo-hotels
    spec:
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: hotel-booking-secrets
              key: MONGODB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hotel-booking-secrets
              key: MONGODB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: hotels
        volumeMounts:
        - name: mongo-hotels-storage
          mountPath: /data/db
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongo-hotels-storage
        persistentVolumeClaim:
          claimName: mongo-hotels-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-hotels
  namespace: hotel-booking
spec:
  selector:
    app: mongo-hotels
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017

---
# MongoDB for Bookings
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-bookings
  namespace: hotel-booking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-bookings
  template:
    metadata:
      labels:
        app: mongo-bookings
    spec:
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: hotel-booking-secrets
              key: MONGODB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hotel-booking-secrets
              key: MONGODB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: bookings
        volumeMounts:
        - name: mongo-bookings-storage
          mountPath: /data/db
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongo-bookings-storage
        persistentVolumeClaim:
          claimName: mongo-bookings-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-bookings
  namespace: hotel-booking
spec:
  selector:
    app: mongo-bookings
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017
